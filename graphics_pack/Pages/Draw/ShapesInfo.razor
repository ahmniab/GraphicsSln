@inject IShapeList ShapeList
@inject NumberOfShapesState NumberOfShapesState
<h4>Shapes Info</h4>
<div class="accordion" id="accordion">
    @foreach(IShape s in ShapeList.Shapes)
    {

        <div class="accordion-item">
            <h2 class="accordion-header" id="shape_@s.GetHashCode()">
                <button class="accordion-button" 
                        type="button" data-bs-toggle="collapse" 
                        data-bs-target="#collapse_@s.GetHashCode()" 
                        aria-expanded="true" 
                        aria-controls="collapse_@s.GetHashCode()"
                        style="color: @(s?.color ?? "black")"
                        >
                    @s.name
                </button>
            </h2>
            <div id="collapse_@s.GetHashCode()" class="accordion-collapse collapse " aria-labelledby="shape_@s.GetHashCode()" data-bs-parent="#accordion">
                <div class="accordion-body">
                    @if (s is Models.LineModel)
                    {
                        <div class="d-flex flex-row mb-3">
                            <LinePointsTable ShapePoints="s.GetIndexes()"></LinePointsTable>
                            <div class="shape-preview">
                                <div>
                                    <div class="border">
                                        <img src="@s.ImgSrc" />
                                        <img src="assets/imgs/grid-line.png"/>
                                    </div>
                                    <button class="btn btn-danger"
                                            onclick="@(new Action<object>(e => DeleteShape(s.GetHashCode())))">
                                        delete
                                    </button>
                                </div>
                            </div>


                        </div>

                    }
                </div>
            </div>
        </div>
    }
</div>

@code {
    protected override void OnInitialized()
    {
        NumberOfShapesState.OnChange += StateHasChanged;
    }

    public void Dispose()
    {
        NumberOfShapesState.OnChange -= StateHasChanged;
    }
    
    public void DeleteShape(int Hash)
    {
        ShapeList.RemoveShape(Hash);
        NumberOfShapesState.NotifyStateChanged();
    }
}